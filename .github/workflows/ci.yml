name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
      - staging
      - trying
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up `stable`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          components: rustfmt

      - name: cargo-fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  grcov:
    name: grcov
    runs-on: ubuntu-20.04
    if: "github.repository_owner == 'qryxip' && github.ref == 'refs/heads/master'"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up `nightly`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt
          override: true

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Resolve `cargo-udeps ^0.1`
        id: resolve-version-of-cargo-udeps
        run: echo "::set-output name=version::$(python ./.github/workflows/resolve-cargo-udeps.py)"

      - name: Install cargo-udeps v${{ steps.resolve-version-of-cargo-udeps.outputs.version }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          version: ${{ steps.resolve-version-of-cargo-udeps.outputs.version }}

      - name: cargo-test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast -- --test-threads 1
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off'
          RUST_BACKTRACE: full

      - name: grcov
        id: grcov
        uses: actions-rs/grcov@v0.1

      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.grcov.outputs.report }}

  build:
    strategy:
      fail-fast: false
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - { channel: stable, target-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { channel: stable, target-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { channel: stable, target-triple: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }

    name: ${{ matrix.channel }}-${{ matrix.target-triple }}
    runs-on: ${{ matrix.os }}

    env:
      CARGO_EQUIP_TEST_NIGHTLY_TOOLCHAIN: nightly-2021-05-20

    steps:
      - name: Disable `core.autocrlf`
        run: git config --global core.autocrlf false
        if: matrix.os == 'windows-2019'

      - name: Checkout
        uses: actions/checkout@v2

      # Workaround for https://github.com/actions/cache/issues/403
      - name: Install GNU tar
        run: |
          type tar
          brew install gnu-tar
          type tar
          echo "PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
          type tar
        if: matrix.os == 'macos-10.15'

      - name: 'Set up `${{ matrix.channel }}` (target: `${{ matrix.target-triple }}`)'
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target-triple }}
          default: true
          profile: minimal
          components: clippy

      - name: Set up `${{ env.CARGO_EQUIP_TEST_NIGHTLY_TOOLCHAIN }}`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.CARGO_EQUIP_TEST_NIGHTLY_TOOLCHAIN }}
          target: ${{ matrix.target-triple }}
          profile: minimal

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Resolve `cargo-udeps ^0.1`
        id: resolve-version-of-cargo-udeps
        run: echo "::set-output name=version::$(python ./.github/workflows/resolve-cargo-udeps.py)"
        shell: bash

      - name: Cache for cargo-udeps
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/cargo-udeps
          key: build-crates-${{ matrix.channle }}-${{ steps.resolve-version-of-cargo-udeps.outputs.version }}

      - name: Cache for build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            ./target
          key: build-build-${{ matrix.channel }}-${{ matrix.target-triple }}-${{ steps.install-toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.*') }}

      - name: Install cargo-udeps v${{ steps.resolve-version-of-cargo-udeps.outputs.version }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-udeps --version '=${{ steps.resolve-version-of-cargo-udeps.outputs.version }}'
          toolchain: stable

      - name: cargo-clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --target ${{ matrix.target-triple }} -- -D warnings

      - name: cargo-test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --target ${{ matrix.target-triple }} -- --test-threads 1
        env:
          RUST_BACKTRACE: full

      - name: cargo-install (locked)
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --debug --target ${{ matrix.target-triple }} --locked

      - name: cargo-install
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --debug --target ${{ matrix.target-triple }}

      - name: cargo-udeps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: --all-targets
          toolchain: ${{ env.CARGO_EQUIP_TEST_NIGHTLY_TOOLCHAIN }}

  upload-archives:
    strategy:
      fail-fast: false
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - { target-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { target-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { target-triple: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }

    name: Upload (${{ matrix.target-triple }})
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Disable `core.autocrlf`
        run: git config --global core.autocrlf false
        if: matrix.os == 'windows-2019'

      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Set up `stable` (target: `${{ matrix.target-triple }}`)'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target-triple }}
          default: true
          profile: minimal

      - name: cargo-install
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --target ${{ matrix.target-triple }} -v --locked

      - name: Create an asset
        id: asset
        run: |
          BIN_TARGET=cargo-equip
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            DOT_EXE=.exe
          fi
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target-triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$HOME/.cargo/bin/$BIN_TARGET$DOT_EXE" "./$ASSET_STEM/"
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            ASSET="$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "./$ASSET"
          else
            ASSET="$ASSET_STEM.tar.gz"
            tar -czvf "./$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: assets
          path: ${{ steps.asset.outputs.asset }}

  upload-release-notes:
    name: Upload the release notes
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Prepare release notes
        run: |
          with open('./CHANGELOG.md') as file:
              changelog = file.read()
          output = ''
          inside_subsection = False
          for line in changelog.splitlines():
              is_h2 = line.startswith('## ')
              if not inside_subsection and is_h2:
                  inside_subsection = True
              elif inside_subsection and not is_h2:
                  output += line + '\n'
              elif inside_subsection:
                  break
          with open('./release-notes.md', 'w') as file:
              file.write(output)
        shell: python

      - name: Upload the release notes
        uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: release-notes.md

  release:
    name: GitHub Release
    runs-on: ubuntu-20.04
    needs: [rustfmt, build, upload-archives, upload-release-notes]

    steps:
      - name: Download the assets
        uses: actions/download-artifact@v2
        with:
          name: assets
          path: ./assets

      - name: Download the release notes
        uses: actions/download-artifact@v2
        with:
          name: release-notes
          path: .

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ./release-notes.md
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
