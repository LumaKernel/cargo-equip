---
source: tests/help-snapshot.rs
expression: "run(\"--help\")?"

---
cargo-equip <version>
Ryo Yamashita <qryxip@gmail.com>

A Cargo subcommand to bundle your code into one `.rs` file for competitive programming.

Use -h for short descriptions and --help for more detials.

USAGE:
    cargo equip [OPTIONS]
    cargo equip [OPTIONS] --src <PATH>
    cargo equip [OPTIONS] --bin <NAME>
    cargo equip [OPTIONS] --example <NAME>

OPTIONS:
        --src <PATH>                  
            Bundle the lib/bin/example target and its dependencies.
            
            This option is intended to be used from editors such as VSCode. Use `--lib`, `--bin` or `--example` for
            normal usage.
        --lib                         
            Bundle the library and its dependencies

        --bin <NAME>                  
            Bundle the binary and its dependencies

        --example <NAME>              
            Bundle the binary example and its dependencies

        --manifest-path <PATH>        
            Path to Cargo.toml

        --exclude <SPEC>...           
            Exclude library crates from bundling

        --exclude-atcoder-crates      
            Alias for:
            --exclude https://github.com/rust-lang/crates.io-index#alga:0.9.3
                      https://github.com/rust-lang/crates.io-index#ascii:1.0.0
                      https://github.com/rust-lang/crates.io-index#bitset-fixed:0.1.0
                      https://github.com/rust-lang/crates.io-index#either:1.5.3
                      https://github.com/rust-lang/crates.io-index#fixedbitset:0.2.0
                      https://github.com/rust-lang/crates.io-index#getrandom:0.1.14
                      https://github.com/rust-lang/crates.io-index#im-rc:14.3.0
                      https://github.com/rust-lang/crates.io-index#indexmap:1.3.2
                      https://github.com/rust-lang/crates.io-index#itertools:0.9.0
                      https://github.com/rust-lang/crates.io-index#itertools-num:0.1.3
                      https://github.com/rust-lang/crates.io-index#lazy_static:1.4.0
                      https://github.com/rust-lang/crates.io-index#libm:0.2.1
                      https://github.com/rust-lang/crates.io-index#maplit:1.0.2
                      https://github.com/rust-lang/crates.io-index#nalgebra:0.20.0
                      https://github.com/rust-lang/crates.io-index#ndarray:0.13.0
                      https://github.com/rust-lang/crates.io-index#num:0.2.1
                      https://github.com/rust-lang/crates.io-index#num-bigint:0.2.6
                      https://github.com/rust-lang/crates.io-index#num-complex:0.2.4
                      https://github.com/rust-lang/crates.io-index#num-derive:0.3.0
                      https://github.com/rust-lang/crates.io-index#num-integer:0.1.42
                      https://github.com/rust-lang/crates.io-index#num-iter:0.1.40
                      https://github.com/rust-lang/crates.io-index#num-rational:0.2.4
                      https://github.com/rust-lang/crates.io-index#num-traits:0.2.11
                      https://github.com/rust-lang/crates.io-index#ordered-float:1.0.2
                      https://github.com/rust-lang/crates.io-index#permutohedron:0.2.4
                      https://github.com/rust-lang/crates.io-index#petgraph:0.5.0
                      https://github.com/rust-lang/crates.io-index#proconio:0.3.6
                      https://github.com/rust-lang/crates.io-index#proconio:0.3.7
                      https://github.com/rust-lang/crates.io-index#proconio:0.3.8
                      https://github.com/rust-lang/crates.io-index#rand:0.7.3
                      https://github.com/rust-lang/crates.io-index#rand_chacha:0.2.2
                      https://github.com/rust-lang/crates.io-index#rand_core:0.5.1
                      https://github.com/rust-lang/crates.io-index#rand_distr:0.2.2
                      https://github.com/rust-lang/crates.io-index#rand_hc:0.2.0
                      https://github.com/rust-lang/crates.io-index#rand_pcg:0.2.1
                      https://github.com/rust-lang/crates.io-index#regex:1.3.6
                      https://github.com/rust-lang/crates.io-index#rustc-hash:1.1.0
                      https://github.com/rust-lang/crates.io-index#smallvec:1.2.0
                      https://github.com/rust-lang/crates.io-index#superslice:1.0.0
                      https://github.com/rust-lang/crates.io-index#text_io:0.1.8
                      https://github.com/rust-lang/crates.io-index#whiteread:0.5.0
             
        --exclude-codingame-crates    
            Alias for:
            --exclude https://github.com/rust-lang/crates.io-index#chrono:0.4.19
                      https://github.com/rust-lang/crates.io-index#itertools:0.10.0
                      https://github.com/rust-lang/crates.io-index#libc:0.2.93
                      https://github.com/rust-lang/crates.io-index#rand:0.8.3
                      https://github.com/rust-lang/crates.io-index#regex:1.4.5
                      https://github.com/rust-lang/crates.io-index#time:0.2.26
             
        --toolchain <TOOLCHAIN>       
            `nightly` toolchain for `cargo-udeps` [default: nightly]

        --remove <REMOVE>...          
            Removes
            * doc comments (`//! ..`, `/// ..`, `/** .. */`, `#[doc = ".."]`) with `--remove docs`.
            * comments (`// ..`, `/* .. */`) with `--remove comments`.
            
            ```
            #[allow(dead_code)]
            pub mod a {
                //! A.
            
                /// A.
                pub struct A; // aaaaa
            }
            ```
            
            â†“
            
            ```
            #[allow(dead_code)]
            pub mod a {
                pub struct A;
            }
            ```
             
        --minify <MINIFY>             
            Minifies
            - each expaned library with `--minify lib`.
            - the whole code with `--minify all`.
            
            Not that the minification function is incomplete. Unnecessary spaces may be inserted.
             
        --no-resolve-cfgs             
            Do not resolve `cfg(..)`s

        --no-rustfmt                  
            Do not format the output before emitting

        --no-check                    
            Do not check the output before emitting

    -o, --output <PATH>               
            Write to the file instead of STDOUT

        --oneline <MINIFY>            
            [Deprecated] Alias for `--minify` [default: none]  [possible values: none, libs, all]

        --resolve-cfgs                
            [Deprecated] No-op

        --rustfmt                     
            [Deprecated] No-op

        --check                       
            [Deprecated] No-op

    -h, --help                        
            Prints help information

    -V, --version                     
            Prints version information


